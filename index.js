#!/usr/bin/env node
const chalk = require('chalk')
const Sequelize = require('sequelize');
const child_process = require('child_process')
const { version } = require("./package.json")
const fs = require('fs');
const { LogType, log } = require("./src/logger.js")

log(LogType.Debug, "Debug Logging Enabled!")

if (!fs.existsSync("./config.json")) {
	log(LogType.Error, `Config does not exist! Make a copy of the file "config.template.json", rename it to "config.json", and edit the values inside the config.`)
	process.exit(1)
}

const { discord_bot, token_signature } = require("./config.json")
const { sendWebhook } = require("./src/webhook.js")

//Token Signature Warnings
if (token_signature === "LunarRec_ReplaceMeWithSomethingElsePlz") {
	log(LogType.Warn, "‚ö†Ô∏èSECURITY RISK DETECTED - CHANGE YOUR JWT TOKEN SIGNATURE‚ö†Ô∏è")
	log(LogType.Warn, "Your \"token_signature\" in your config is still set to the default value! (LunarRec_ReplaceMeWithSomethingElsePlz)")
	log(LogType.Warn, "This means anyone can create JWT tokens and log into anyones account that is on this server!")
	log(LogType.Warn, "Please change this variable to something long and unique before making this server public to other players.")
} else if (token_signature.length < 10) {
	log(LogType.Warn, "‚ö†Ô∏èSECURITY RISK DETECTED - CHANGE YOUR JWT TOKEN SIGNATURE‚ö†Ô∏è")
	log(LogType.Warn, "Your \"token_signature\" in your config is less than 10 characters.")
	log(LogType.Warn, "This makes it easier for people to brute force your JWT password!")
	log(LogType.Warn, "Please change this variable to something long and unique before making this server public to other players.")
}

//load colors
let colors = require('./colors.json')

try{process.commit = child_process.execSync('git rev-parse HEAD').toString().substring(0, 7)} catch(e) {process.commit = "[git not installed]"}

let versionStr = ` Version ${version} (commit ${process.commit})`

console.log(`${" ".repeat((versionStr.length-"lunarrec".length)/2)}${chalk.hex(colors.logo)("LunarRec")}\n${versionStr}\n${"=".repeat(versionStr.length+1)}`)

//Reset data command
if (process.argv[2] == "reset"){
	return require('./util.js').resetServerData()
}

//Init DB
process.db = require('./database.js')

//Admin panel
if (process.argv[2] == "admin"){
	return require("./src/admin.js").admin()
}

async function start() {
	//check for first run
	if (!fs.existsSync("./.first_run")) {
		fs.writeFileSync("./.first_run", "# Dummy file generated by LunarRec.\n# Used to tell LunarRec that the first time setup has executed already.\n# Delete this if you want to re-run the first time setup.")
		console.log(`Hello there üëã! 
It looks like this is your first time running LunarRec.
Please check out the github repo for first time install steps.
Also note that LunarRec is still a heavy work in progress project that is not production ready.

To read this message again, Delete the file ".first_run" in the root directory of LunarRec.
`)}

    await process.db.users.sync()
	await process.db.images.sync()

	//reset everyone's session to NULL incase it isn't already.
	try {
		await process.db.users.update(
		  { session: null },
		  { where: {} }
		);
	} catch (error) {
		log(LogType.Error, "Failed to set user sessions to \"NULL\". Invalid active player count and player login issues may happen.")
	}

	if (discord_bot.enabled) {
		log(LogType.Bot, "Discord Bot enabled!")
		//push commands
		require(`./src/bot/deploy.js`)

		//start the uhhh bot
		require('./src/bot/index.js')
	}

    require('./src/server.js').start()

	sendWebhook("‚úÖ **This LunarRec instance has started!**")
}

start()